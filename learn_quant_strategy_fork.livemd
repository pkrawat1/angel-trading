# Learn Quant Strategy - fork

```elixir
Mix.install([
  {:req, "~> 0.4.5"},
  {:explorer, "~> 0.7.1"},
  {:kino_explorer, "~> 0.1.12"},
  {:nx, "~> 0.6.4"}
])
```

## Nifty 200 CSV

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
resp = Req.get!("https://nsearchives.nseindia.com/content/indices/ind_nifty200list.csv")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
resp = Req.get!("https://query2.finance.yahoo.com/v7/finance/options/IRB.NS")
result = resp.body["optionChain"]["result"] |> List.first() |> Map.get("quote")
require Explorer.DataFrame, as: DF

data =
  result
  |> Jason.encode!()
  |> DF.load_ndjson!()
  |> DF.select([
    :regularMarketOpen,
    :regularMarketDayHigh,
    :regularMarketDayLow,
    :regularMarketPrice,
    :regularMarketChange
  ])
  |> DF.rename(
    regularMarketOpen: :open,
    regularMarketDayHigh: :high,
    regularMarketDayLow: :low,
    regularMarketPrice: :close,
    regularMarketChange: :price_change
  )
```

```elixir
# Assuming you have already loaded the data into the 'data' DataFrame

# Calculate daily price changes
price_changes = DF.select(data, [:price_change])

# Calculate gains and losses
gains = DF.filter(price_changes, [price_change > 0])
losses = DF.filter(price_changes, [price_change < 0])

# Calculate average gains and losses over a specified period (e.g., 14 days)
# average_gains = DF.rolling(gains, :mean, 14)
# average_losses = DF.rolling(losses, :mean, 14)

# Calculate relative strength (RS)
# rs = DF.div(average_gains, average_losses |> DF.negate())

# Calculate the Relative Strength Index (RSI)
# rsi = DF.subtract(100, DF.div(100, DF.add(1, rs)))

# Add the RSI column to the original DataFrame
# data_with_rsi = DF.concat(data, rsi)

# Display the DataFrame with RSI
# DF.show(data_with_rsi)
```
