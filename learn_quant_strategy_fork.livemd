# Learn Quant Strategy

```elixir
Mix.install([
  {:req, "~> 0.4.5"},
  {:explorer, "~> 0.7.1"},
  {:kino_explorer, "~> 0.1.12"},
  {:nx, "~> 0.6.4"}
])
```

## Nifty 200 CSV

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
resp = Req.get!("https://nsearchives.nseindia.com/content/indices/ind_nifty200list.csv")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ticker = "GOOG"
range = "1y"
interval = "1d"
metrics = "close"

url =
  "https://query1.finance.yahoo.com/v8/finance/chart/#{ticker}?metrics=#{metrics}&interval=#{interval}&range=#{range}"

IO.puts(url)
resp = Req.get!(url)

require Explorer.DataFrame, as: DF
require Explorer.Series, as: S

quote_data =
  resp.body["chart"]["result"]
  |> List.first()
  |> get_in(["indicators", "quote"])
  |> List.first()
  |> DF.new()

timestamp_data =
  resp.body["chart"]["result"]
  |> List.first()
  |> Map.take(["timestamp"])
  |> DF.new()

data = DF.concat_columns([timestamp_data, quote_data])
```

```elixir
# Assuming you have already loaded the data into the 'data' DataFrame
data = DF.to_series(data)
# Calculate daily price changes
price_changes = S.transform(data, close: &DF.diff(&1, 1))

# Calculate gains and losses
# gains = DF.filter(price_changes, [price_change > 0])
# losses = DF.filter(price_changes, [price_change < 0])

# Calculate average gains and losses over a specified period (e.g., 14 days)
# average_gains = DF.rolling(gains, :mean, 14)
# average_losses = DF.rolling(losses, :mean, 14)

# Calculate relative strength (RS)
# rs = DF.div(average_gains, average_losses |> DF.negate())

# Calculate the Relative Strength Index (RSI)
# rsi = DF.subtract(100, DF.div(100, DF.add(1, rs)))

# Add the RSI column to the original DataFrame
# data_with_rsi = DF.concat(data, rsi)

# Display the DataFrame with RSI
# DF.show(data_with_rsi)
```
