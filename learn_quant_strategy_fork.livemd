# Learn Quant Strategy

```elixir
Mix.install(
  [
    {:req, "~> 0.4.5"},
    {:explorer, "~> 0.7.1"},
    {:kino_explorer, "~> 0.1.12"},
    {:nx, "~> 0.6.4"},
    {:kino_vega_lite, "~> 0.1.10"},
    {:kino_bumblebee, "~> 0.4.0"},
    {:exla, ">= 0.0.0"},
    {:timex, "~> 3.7"}
  ],
  config: [nx: [default_backend: EXLA.Backend]]
)
```

## Nifty 200 CSV

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
resp = Req.get!("https://nsearchives.nseindia.com/content/indices/ind_nifty200list.csv")
```

## stock history

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ticker = "IRFC.NS"
range = "1mo"
interval = "15m"
metrics = "close"

url =
  "https://query1.finance.yahoo.com/v8/finance/chart/#{ticker}?metrics=#{metrics}&interval=#{interval}&range=#{range}"

IO.puts(url)
resp = Req.get!(url)

require Explorer.DataFrame, as: DF
require Explorer.Series, as: S

quote_data =
  resp.body["chart"]["result"]
  |> List.first()
  |> get_in(["indicators", "quote"])
  |> List.first()
  |> DF.new()
  |> DF.mutate(
    price_change:
      S.subtract(
        close,
        S.shift(close, 1)
      )
  )
  |> DF.mutate(
    gain: if(S.greater(price_change, 0), do: price_change, else: 0),
    loss: if(S.less(price_change, 0), do: -price_change, else: 0)
  )
  |> DF.mutate(
    avg_gain: S.window_mean(gain, 14, min_periods: 14),
    avg_loss: S.window_mean(loss, 14, min_periods: 14)
  )
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
quote_data =
  quote_data
  |> DF.mutate_with(
    &[
      prev_avg_gain: S.shift(&1["avg_gain"], 1),
      prev_avg_loss: S.shift(&1["avg_loss"], 1)
    ]
  )
  |> DF.mutate_with(
    &[
      avg_gain: S.divide(S.add(&1["gain"], S.multiply(13, &1["prev_avg_gain"])), 14),
      avg_loss: S.divide(S.add(&1["loss"], S.multiply(13, &1["prev_avg_loss"])), 14)
    ]
  )
  |> DF.mutate(rs: S.divide(avg_gain, avg_loss))
  |> DF.mutate(rsi: S.subtract(100, S.divide(100, S.add(1, rs))))

timestamp_data =
  resp.body["chart"]["result"]
  |> List.first()
  |> Map.take(["timestamp"])
  |> Enum.reduce(%{"timestamp" => [], "datetime" => []}, fn {_, data}, acc ->
    %{
      acc
      | "timestamp" => data,
        "datetime" =>
          Enum.map(data, fn timestamp ->
            {:ok, datetime} = DateTime.from_unix(timestamp)
            # "#{DateTime.shift_zone!(datetime, "Asia/Kolkata")}"
            "#{datetime}"
          end)
    }
  end)
  |> DF.new()

data = DF.concat_columns([timestamp_data, quote_data])
```

<!-- livebook:{"attrs":"eyJjaGFydF90aXRsZSI6bnVsbCwiaGVpZ2h0IjpudWxsLCJsYXllcnMiOlt7ImFjdGl2ZSI6dHJ1ZSwiY2hhcnRfdHlwZSI6ImxpbmUiLCJjb2xvcl9maWVsZCI6bnVsbCwiY29sb3JfZmllbGRfYWdncmVnYXRlIjpudWxsLCJjb2xvcl9maWVsZF9iaW4iOm51bGwsImNvbG9yX2ZpZWxkX3NjYWxlX3NjaGVtZSI6bnVsbCwiY29sb3JfZmllbGRfdHlwZSI6bnVsbCwiZGF0YV92YXJpYWJsZSI6ImRhdGEiLCJnZW9kYXRhX2NvbG9yIjoiYmx1ZSIsImxhdGl0dWRlX2ZpZWxkIjpudWxsLCJsb25naXR1ZGVfZmllbGQiOm51bGwsInhfZmllbGQiOiJkYXRldGltZSIsInhfZmllbGRfYWdncmVnYXRlIjpudWxsLCJ4X2ZpZWxkX2JpbiI6bnVsbCwieF9maWVsZF9zY2FsZV90eXBlIjpudWxsLCJ4X2ZpZWxkX3R5cGUiOiJ0ZW1wb3JhbCIsInlfZmllbGQiOiJyc2kiLCJ5X2ZpZWxkX2FnZ3JlZ2F0ZSI6bnVsbCwieV9maWVsZF9iaW4iOm51bGwsInlfZmllbGRfc2NhbGVfdHlwZSI6bnVsbCwieV9maWVsZF90eXBlIjoicXVhbnRpdGF0aXZlIn1dLCJ2bF9hbGlhcyI6IkVsaXhpci5WZWdhTGl0ZSIsIndpZHRoIjo4MDB9","chunks":null,"kind":"Elixir.KinoVegaLite.ChartCell","livebook_object":"smart_cell"} -->

```elixir
VegaLite.new(width: 800)
|> VegaLite.data_from_values(data, only: ["datetime", "rsi"])
|> VegaLite.mark(:line)
|> VegaLite.encode_field(:x, "datetime", type: :temporal)
|> VegaLite.encode_field(:y, "rsi", type: :quantitative)
```
